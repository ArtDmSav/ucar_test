### Кейс-задание

Представь, что ты — разработчик в стартапе. Мы вместе делаем сервис, который в реальном времени собирает отзывы пользователей и подсказывает, где нужно исправить ошибку или добавить фичу.

**Зачем это нужно**

- Клиенты оставляют короткие отзывы в чатах и на сайте.

- Наша задача — сразу понять, хороший отзыв или жалоба.

- На основе этого быстро реагировать: улучшать продукт, отвечать клиентам, снижать отток.

**Твоя миссия (≈30 мин)**
Сделать мини-сервис, который принимает отзыв и сразу оценивает его настроение.

1. **Контекст**

  - Мы используем Flask и SQLite. По желанию можно **сделать на FastAPI**

  - Позже к этому прототипу докину баг-репорты и дашборд.

2. **Что должно получиться**

  - HTTP-сервис на Flask или FastAPI (в файле `app.py` или `main.py`).

  - БД `reviews.db` с таблицей:

    ```Plain Text
sql
КопироватьРедактировать
CREATE TABLE IF NOT EXISTS reviews (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  text TEXT NOT NULL,
  sentiment TEXT NOT NULL,
  created_at TEXT NOT NULL
);
```


  - **POST** `/reviews`:

    - Принимает JSON `{ "text": "ваш отзыв" }`.

    - По простому словарю (словосочетаниям “хорош”, “люблю” → positive; “плохо”, “ненавиж” → negative; иначе neutral) определяет `sentiment`.

    - Записывает в БД с `created_at = datetime.utcnow().isoformat()`.

    - Возвращает JSON с полями `{ id, text, sentiment, created_at }`.

  - **GET** `/reviews?sentiment=negative`:

    - Возвращает все отзывы с `sentiment=negative`.

3. **Почему важно**

  - Проверяем навыки веб-сервисов и HTTP.

  - Видим умение работать с реляционной БД и писать простые SQL-запросы.

  - Оцениваем понимание чистоты кода и структуры проекта.

4. **Как сдавать**

  - Один файл `app.py` или `main.py` (в зависимости от фреймворка).

  - Краткий README:

    ```Plain Text
bash
КопироватьРедактировать
pip install flask
python app.py
```


  Если вы сделали на FastAPI, в README добавить:

  ```Plain Text
bash
КопироватьРедактировать
pip install fastapi uvicorn
uvicorn main:app --reload
```


  - Примеры curl-запросов и их ответов.

5. **Критерии оценки**

  1. Сервис стартует командой `python app.py` без ошибок.

  2. POST `/reviews` сохраняет и возвращает JSON с 4 полями.

  3. GET `/reviews?sentiment=negative` фильтрует по настроению.

  4. Таблица создаётся автоматически на старте.

  5. Код простой, понятный, без лишних зависимостей.

